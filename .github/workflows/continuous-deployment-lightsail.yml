name: CD. Deploy to AWS Lightsail
on:
  push:
    branches: [main]

env:
  REPOSITORY: ${{ github.repository }}
  GHCR_URL: ghcr.io # GitHub Container Registry

jobs:
  cd:
    name: Build & Push GitHub Package & Deploy Docker Image
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
      - name: Get version from pom.xml
        id: get-version
        run: |
          echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "ARTIFACT=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_URL }} # GitHub Container Registry
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PERSONAL_ACCESS_TOKEN }}
      - name: Build Docker image
        run: docker build  -t $ARTIFACT:$VERSION .
      - name: Tag and Push on GitHub Packages
        run: |
          LOWER_URL=$(echo "$GHCR_URL/$REPOSITORY" | tr '[:upper:]' '[:lower:]')
          docker tag $ARTIFACT:$VERSION $LOWER_URL:$VERSION
          docker tag $ARTIFACT:$VERSION $LOWER_URL:latest
          docker push $LOWER_URL:$VERSION
          docker push $LOWER_URL:latest

      - name: Deploy to AWS Lightsail
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.AWS_LIGHTSAIL_IP }}
          username: ${{ secrets.AWS_LIGHTSAIL_USER }}
          key: ${{ secrets.AWS_LIGHTSAIL_SSH_KEY }}
          script: |
            LOWER_REPO=$(echo "${{ env.GHCR_URL }}/${{ env.REPOSITORY }}" | tr '[:upper:]' '[:lower:]')
            echo ${{ secrets.GHCR_PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker stop ${{ env.ARTIFACT }}-app || true
            docker rm ${{ env.ARTIFACT }}-app || true
            docker rmi $LOWER_REPO:latest || true
            docker pull $LOWER_REPO:latest
            docker run -d --name ${{ env.ARTIFACT }}-app --restart always -p 80:8080 $LOWER_REPO:latest